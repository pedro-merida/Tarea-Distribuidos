// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_jugador_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JugadoresClient is the client API for Jugadores service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JugadoresClient interface {
	EnviarSolicitud(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*Respuesta, error)
	EnviarInicio(ctx context.Context, in *Inicio, opts ...grpc.CallOption) (*Juego, error)
	EnviarJugada(ctx context.Context, in *Numero, opts ...grpc.CallOption) (*Estado, error)
}

type jugadoresClient struct {
	cc grpc.ClientConnInterface
}

func NewJugadoresClient(cc grpc.ClientConnInterface) JugadoresClient {
	return &jugadoresClient{cc}
}

func (c *jugadoresClient) EnviarSolicitud(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, "/jugador.Jugadores/EnviarSolicitud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jugadoresClient) EnviarInicio(ctx context.Context, in *Inicio, opts ...grpc.CallOption) (*Juego, error) {
	out := new(Juego)
	err := c.cc.Invoke(ctx, "/jugador.Jugadores/EnviarInicio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jugadoresClient) EnviarJugada(ctx context.Context, in *Numero, opts ...grpc.CallOption) (*Estado, error) {
	out := new(Estado)
	err := c.cc.Invoke(ctx, "/jugador.Jugadores/EnviarJugada", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JugadoresServer is the server API for Jugadores service.
// All implementations must embed UnimplementedJugadoresServer
// for forward compatibility
type JugadoresServer interface {
	EnviarSolicitud(context.Context, *Peticion) (*Respuesta, error)
	EnviarInicio(context.Context, *Inicio) (*Juego, error)
	EnviarJugada(context.Context, *Numero) (*Estado, error)
	mustEmbedUnimplementedJugadoresServer()
}

// UnimplementedJugadoresServer must be embedded to have forward compatible implementations.
type UnimplementedJugadoresServer struct {
}

func (UnimplementedJugadoresServer) EnviarSolicitud(context.Context, *Peticion) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarSolicitud not implemented")
}
func (UnimplementedJugadoresServer) EnviarInicio(context.Context, *Inicio) (*Juego, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarInicio not implemented")
}
func (UnimplementedJugadoresServer) EnviarJugada(context.Context, *Numero) (*Estado, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarJugada not implemented")
}
func (UnimplementedJugadoresServer) mustEmbedUnimplementedJugadoresServer() {}

// UnsafeJugadoresServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JugadoresServer will
// result in compilation errors.
type UnsafeJugadoresServer interface {
	mustEmbedUnimplementedJugadoresServer()
}

func RegisterJugadoresServer(s grpc.ServiceRegistrar, srv JugadoresServer) {
	s.RegisterService(&Jugadores_ServiceDesc, srv)
}

func _Jugadores_EnviarSolicitud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peticion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JugadoresServer).EnviarSolicitud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jugador.Jugadores/EnviarSolicitud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JugadoresServer).EnviarSolicitud(ctx, req.(*Peticion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jugadores_EnviarInicio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Inicio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JugadoresServer).EnviarInicio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jugador.Jugadores/EnviarInicio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JugadoresServer).EnviarInicio(ctx, req.(*Inicio))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jugadores_EnviarJugada_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Numero)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JugadoresServer).EnviarJugada(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jugador.Jugadores/EnviarJugada",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JugadoresServer).EnviarJugada(ctx, req.(*Numero))
	}
	return interceptor(ctx, in, info, handler)
}

// Jugadores_ServiceDesc is the grpc.ServiceDesc for Jugadores service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jugadores_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jugador.Jugadores",
	HandlerType: (*JugadoresServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnviarSolicitud",
			Handler:    _Jugadores_EnviarSolicitud_Handler,
		},
		{
			MethodName: "EnviarInicio",
			Handler:    _Jugadores_EnviarInicio_Handler,
		},
		{
			MethodName: "EnviarJugada",
			Handler:    _Jugadores_EnviarJugada_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jugador.proto",
}
